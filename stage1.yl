;; Copyright (c) 2023 Philipp Geyer and Isak Andersson
;; 
;; This software is provided 'as-is', without any express or implied
;; warranty. In no event will the authors be held liable for any damages
;; arising from the use of this software.
;; 
;; Permission is granted to anyone to use this software for any purpose,
;; including commercial applications, and to alter it and redistribute it
;; freely, subject to the following restrictions:
;; 
;; 1. The origin of this software must not be misrepresented; you must not
;;    claim that you wrote the original software. If you use this software
;;    in a product, an acknowledgment in the product documentation would be
;;    appreciated but is not required.
;; 2. Altered source versions must be plainly marked as such, and must not be
;;    misrepresented as being the original software.
;; 3. This notice may not be removed or altered from any source distribution.
;; 
;; Philipp Geyer             Isak Andersson
;; philipp@geyer.co.uk       contact@bitpuffin.com

; Setup out search path to lookup files properly
(add-to-list 'search-path "src/stage1")

; Start our stage1 compiler
(load-file "stage1.yl")

(define 'read-file
  (lambda (file)
    (parse (read-file-text file))))

;; This currently doesn't work for two reasons
;; The first is that it's looking for 'load to load files, while we're currently
;; using 'load-file. The second is that it seems to mess with memory somehow. I'm
;; going to fix the latter and get it to work just by traversing the single file
;; before I allow it to go free and actually insert files into the ast
(define 'replace-load-forms
  (lambda (ast)
    (let ((node ast))
      (while (not (nil? node))
	     (cond ((list? node)
		    (let ((car-node (replace-load-forms (car node)))
			  (cdr-node (replace-load-forms (cdr node))))
		      (cond ((eq? (car node) 'load)
			     (let ((file (cadr node)))
			       (replace-load-forms (read-file file))))
			    (else (cons car-node cdr-node)))))
		   (else node))
	     (set! 'node (cdr node))))))



; load the file to be compiled
(let ((filename (car (command-line))))
  (display (concat "Parsing file: " filename))(newline)
  (let ((ast (parse (read-file-text filename))))
    (set! 'ast (replace-load-forms ast))
    (print-cell ast)))
    
