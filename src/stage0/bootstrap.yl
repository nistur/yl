;; Copyright (c) 2023 Philipp Geyer <philipp@geyer.co.uk>
;; 
;; This software is provided 'as-is', without any express or implied
;; warranty. In no event will the authors be held liable for any damages
;; arising from the use of this software.
;; 
;; Permission is granted to anyone to use this software for any purpose,
;; including commercial applications, and to alter it and redistribute it
;; freely, subject to the following restrictions:
;; 
;; 1. The origin of this software must not be misrepresented; you must not
;;    claim that you wrote the original software. If you use this software
;;    in a product, an acknowledgment in the product documentation would be
;;    appreciated but is not required.
;; 2. Altered source versions must be plainly marked as such, and must not be
;;    misrepresented as being the original software.
;; 3. This notice may not be removed or altered from any source distribution.

(define 'eval--internal eval)
(define 'eval (lambda (x) (global (eval--internal (parse x)))))

(define 'cadr (lambda (x) (car (cdr x))))


(define 'load (lambda (file) (eval (read-file-text file))))

(define 'search-path '())

(define 'add-to-list (lambda (lst val)
      		     (if (nil? lst)
			 (cons val '())
			 (cons (car lst) (add-to-list (cdr lst) val)))))

(define 'bootstrap/load-file (lambda (filename lst)
			     (if (null? lst)
				 nil
				 (let ((path (concat (car lst) "/" filename)))
				   (if (file-exists? path)
				       (load path)
				       (bootstrap/load-file filename (cdr lst)))))))

(define 'load-file (lambda (file)
		   (bootstrap/load-file file search-path)))
		   

(define 'command-line (lambda () args))

(define 'command-line-pop (lambda ()
			    (let ((prev-command-line command-line))
			      (set! 'command-line (lambda ()
						    (cdr (prev-command-line)))))))
