;; Copyright (c) 2023 Philipp Geyer and Isak Andersson
;;
;;   This file is part of yl.
;;
;;   yl is free software: you can redistribute it and/or modify it
;;   under the terms of the GNU Lesser General Public License as
;;   published by the Free Software Foundation, either version 3 of
;;   the License, or (at your option) any later version.
;;
;;   yl is distributed in the hope that it will be useful, but WITHOUT
;;   ANY WARRANTY; without even the implied warranty of
;;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;;   Lesser General Public License for more details.
;;
;;   You should have received a copy of the GNU Lesser General Public
;;   License along with yl. If not, see
;;   <https://www.gnu.org/licenses/>.
;;
;; Philipp Geyer             Isak Andersson
;; philipp@geyer.co.uk       contact@bitpuffin.com

(define eval--internal eval)
(define eval (lambda (x) (global (eval--internal (parse x)))))

(define cadr (lambda (x) (car (cdr x))))


(define load (lambda (file) (eval (read-file-text file))))

(define search-path '())

(define append (lambda (lst val)
      		     (if (nil? lst)
			 (cons val '())
			 (cons (car lst) (append (cdr lst) val)))))

(define add-to-list (lambda (lst val)
		       (set! lst (append lst val))))

(define bootstrap/load-file (lambda (filename lst)
			     (if (nil? lst)
				 nil
				 (let ((path (concat (car lst) "/" filename)))
				   (if (file-exists? path)
				       (load path)
				       (bootstrap/load-file filename (cdr lst)))))))

(define load-file (lambda (file)
		   (bootstrap/load-file file search-path)))
		   

(define command-line (lambda () args))

(define command-line-pop (lambda ()
			    (let ((prev-command-line command-line))
			      (set! 'command-line (lambda ()
						    (cdr (prev-command-line)))))))

(define else t)

