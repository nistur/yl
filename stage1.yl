;; Copyright (c) 2023 Philipp Geyer and Isak Andersson
;;
;;   This file is part of yl.
;;
;;   yl is free software: you can redistribute it and/or modify it
;;   under the terms of the GNU Lesser General Public License as
;;   published by the Free Software Foundation, either version 3 of
;;   the License, or (at your option) any later version.
;;
;;   yl is distributed in the hope that it will be useful, but WITHOUT
;;   ANY WARRANTY; without even the implied warranty of
;;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;;   Lesser General Public License for more details.
;;
;;   You should have received a copy of the GNU Lesser General Public
;;   License along with yl. If not, see
;;   <https://www.gnu.org/licenses/>.
;;
;; Philipp Geyer             Isak Andersson
;; philipp@geyer.co.uk       contact@bitpuffin.com

; Setup out search path to lookup files properly
(add-to-list 'search-path "src/stage1")

; Start our stage1 compiler
(load-file "stage1.yl")

(define 'read-file
  (lambda (file)
    (parse (read-file-text file))))

;; This currently doesn't work for two reasons
;; The first is that it's looking for 'load to load files, while we're currently
;; using 'load-file. The second is that it seems to mess with memory somehow. I'm
;; going to fix the latter and get it to work just by traversing the single file
;; before I allow it to go free and actually insert files into the ast
(define 'replace-load-forms
  (lambda (ast)
    (let ((node ast))
      (while (not (nil? node))
	     (cond ((list? node)
		    (let ((car-node (replace-load-forms (car node)))
			  (cdr-node (replace-load-forms (cdr node))))
		      (cond ((eq? (car node) 'load)
			     (let ((file (cadr node)))
			       (replace-load-forms (read-file file))))
			    (else (cons car-node cdr-node)))))
		   (else node))
	     (set! 'node (cdr node))))))



; load the file to be compiled
(let ((filename (car (command-line))))
  (display (concat "Parsing file: " filename))(newline)
  (let ((ast (parse (read-file-text filename))))
;    (set! 'ast (replace-load-forms ast))
    (print-cell ast)))
    
